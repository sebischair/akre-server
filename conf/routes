# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET           /updateAllConcepts                           controllers.KeywordExtractorController.updateConceptsForDesignDecisions()
GET           /updateAllKeywords                           controllers.KeywordExtractorController.updateKeywordsForDesignDecisions()

GET           /addToken                                    controllers.AnnotationController.addToken(token: String ?= "")
GET           /removeToken                                 controllers.AnnotationController.removeToken(token: String ?= "")
POST          /processDocument                             controllers.DocumentController.processDocument()
POST          /annotate                                    controllers.DocumentController.processDocument()
POST          /getMetaInformation                          controllers.DocumentController.getMetaInformation()
POST          /getSoftwareSolutions                        controllers.SoftwareRecommendationController.getSoftwareSolutions()
POST          /getAlternatives                             controllers.AlternativesController.getAlternatives()
POST          /removeSoftware                              controllers.SoftwareRecommendationController.removeSoftwareSolution()
POST          /addSoftware                                 controllers.SoftwareRecommendationController.addSoftwareSolution()
POST          /removeAlternative                           controllers.AlternativesController.removeAlternative()
POST          /addAlternative                              controllers.AlternativesController.addAlternative()

#cc-annotator rest api
POST          /processCode                                 controllers.CodeController.processCode()
POST          /project                                     controllers.ProjectController.create()
GET           /project                                     controllers.ProjectController.getAll()
GET           /pattern                                     controllers.CodeController.pattern(projectId: String ?= "")
POST          /pattern                                     controllers.CodeController.updatePattern()
POST          /codeToken                                   controllers.CCAnnotatorController.create()
GET           /codeToken                                   controllers.CCAnnotatorController.getAll()
GET           /codeTokenInFile                             controllers.CCAnnotatorController.getAllForFileId(fileId: String ?= "")
GET           /codeTokenInProject                          controllers.CCAnnotatorController.getAllForProjectId(projectId: String ?= "")
GET           /deleteCodeToken                             controllers.CCAnnotatorController.delete(id: String ?= "")

# Amelietor specific
POST          /getFileContent                              controllers.getFileContent.upload()
POST          /createSession                               controllers.SessionController.createNewSession()

GET           /annotations                                 controllers.AnnotationController.getAll()
GET           /paragraph/:paragraphHash/annotations        controllers.AnnotationController.getAnnotationsByHash(paragraphHash: String)
POST          /annotation                                  controllers.AnnotationController.create()
PUT           /annotation/:annotationId                    controllers.AnnotationController.update(annotationId: String)
DELETE        /annotation/:annotationId                    controllers.AnnotationController.delete(annotationId: String)


#uncertainty detection
POST          /upload                                      controllers.getFileContent.uploadAndSave()
GET           /annotate/:paraghraphHash                    controllers.SpaCyController.process(paraghraphHash)

#POST          /record/delete/all                           controllers.RecordController.deleteAllDocuments()
#GET           /record/all                                  controllers.RecordController.getAllDocuments()
GET           /updateTaskWithQA                            controllers.QualityAttributesController.updateTaskWithQA(projectId: String)
GET           /updateTaskWithAE                            controllers.ArchitecturalElementsController.updateTaskWithAE(projectId: String)
GET           /getQAData                                   controllers.QADataController.getQAData(projectId: String)
GET           /getConsolidatedQAData                       controllers.QADataController.getConQAData(projectId: String)
GET           /getAE                                       controllers.AEController.getAE(projectId: String)
GET           /getAssignee                                 controllers.AssigneeController.getAssignee(projectId: String)
GET           /predictAssignee                             controllers.PredictionController.predictAssignee(projectId: String)

GET           /labelDesignDecisions                        controllers.LabelDesignDecisionsController.labelDesignDecisions(projectId: String)

GET           /getDataForAEV                               controllers.amelie.AEController.getAE(projectName: String)